diff -x .git -x .gitignore -Naur gstreamer-vaapi/ChangeLog isg_gms-gstreamer-vaapi/ChangeLog
--- gstreamer-vaapi/ChangeLog	2016-08-09 02:31:44.148660664 +0800
+++ isg_gms-gstreamer-vaapi/ChangeLog	2016-08-09 02:31:36.276519812 +0800
@@ -1,9 +1,227 @@
+=== release 1.8.2 ===
+
+2016-06-09  Sebastian Dröge <slomo@coaxion.net>
+
+	* configure.ac:
+	  releasing 1.8.2
+
+2016-04-29 13:11:48 +0200  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst/vaapi/gstvaapipluginbase.h:
+	  plugin: fix macro processor check
+	  Instead of #ifdef it should be used #if becasuse USE_GST_GL_HELPERS is always
+	  defined in config.h, but it would be 0 or 1 depending on the configure output.
+	  https://bugzilla.gnome.org/show_bug.cgi?id=765702
+
+2016-04-29 12:53:06 +0200  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* tests/test-display.c:
+	  tests: display: guard possible unused variables
+	  https://bugzilla.gnome.org/show_bug.cgi?id=765702
+
+=== release 1.8.1 ===
+
+2016-04-20 18:39:46 +0300  Sebastian Dröge <sebastian@centricular.com>
+
+	* ChangeLog:
+	* NEWS:
+	* configure.ac:
+	* gstreamer-vaapi.doap:
+	  Release 1.8.1
+
+2016-04-13 20:33:32 +0200  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst/vaapi/gstvaapipluginutil.c:
+	  plugins: fix compilation when EGL/GLX is disabled
+	  The compiler might complain of gst_vaapi_create_display_from_handle() being
+	  unused if both EGL and GLX are disabled. This patch avoid that compilation
+	  error.
+
+2016-04-07 18:03:42 +0200  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst-libs/gst/vaapi/gstvaapisurface.c:
+	  surface: destroy derived image
+	  If gst_vaapi_image_new_with_image() fails, the created derived image should be
+	  destroyed, otherwise the surface cannot be processed because is being used.
+	  https://bugzilla.gnome.org/show_bug.cgi?id=764607
+
+2016-04-19 12:00:11 +0200  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* configure.ac:
+	  build: restrict until codecparsers <= 1.8.99
+	  gstreamer-codecparsers-1.0 version 1.9 includes an API/ABI break in VP9
+	  parser. This patch restricts the compilation of gstreamer-vaapi version 1.8
+	  with a gstreamer-codecparsers-1.0 version lower than 1.8.99
+
+2016-04-13 14:09:00 +0200  Michael Olbrich <m.olbrich@pengutronix.de>
+
+	* gst-libs/gst/vaapi/gstvaapicodedbufferpool.c:
+	  libs: fix deleting a GstVaapiCodedBufferPool object
+	  Call gst_vaapi_video_pool_finalize() in coded_buffer_pool_finalize().
+	  Otherwise it is not called when the pool is destroyed and all objects
+	  referenced by the GstVaapiVideoPool are never released.
+	  https://bugzilla.gnome.org/show_bug.cgi?id=764993
+
+2016-03-30 14:37:21 +0300  Sreerenj Balachandran <sreerenj.balachandran@intel.com>
+
+	* gst-libs/gst/vaapi/gstvaapidecoder_h265.c:
+	  decoder: h265: Fix offset calculation when there is more than one vps/sps/pps present in codec_data
+	  The array_completeness, reserved bit and num_nal_units fields
+	  in HEVCDecoderConfigurationRecord will be present for each VPS/SPS/PPS array list,
+	  but not for each occurance of similar headers.
+	  https://bugzilla.gnome.org/show_bug.cgi?id=764274
+
+2016-03-28 13:13:56 +0200  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst/vaapi/gstvaapivideometa_texture.c:
+	  gltextureupload: use an array for texture type
+	  Instead of using a single value for the texture type, use an array with 4
+	  elements, just as the GstVideoGLTextureUploadMeta, avoiding a buffer
+	  overflow.
+	  https://bugzilla.gnome.org/show_bug.cgi?id=764231
+
+2016-03-24 13:36:24 +0100  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst/vaapi/gstvaapidecode.h:
+	  vaapidecode: GST_VAAPIDECODE macro is a cast
+	  This patch is the continuation of commit 1e1d3b1d because the function
+	  gst_vaapidecode_get_type() got undefined since then.
+	  Now, the macro GST_VAAPIDECODE is a simple cast to the GstVaapiDecode
+	  structure. The rest of the GObject handling macros were deleted too.
+
+=== release 1.8.0 ===
+
+2016-03-24 13:11:05 +0200  Sebastian Dröge <sebastian@centricular.com>
+
+	* ChangeLog:
+	* NEWS:
+	* configure.ac:
+	* gstreamer-vaapi.doap:
+	  Release 1.8.0
+
+=== release 1.7.91 ===
+
+2016-03-15 12:39:20 +0200  Sebastian Dröge <sebastian@centricular.com>
+
+	* ChangeLog:
+	* NEWS:
+	* configure.ac:
+	* gstreamer-vaapi.doap:
+	  Release 1.7.91
+
+2016-03-11 17:44:07 +0200  Sreerenj Balachandran <sreerenj.balachandran@intel.com>
+
+	* gst-libs/gst/vaapi/gstvaapidecoder_h265.c:
+	  decoder: h265: Fix offset calculation in codec_data parsing
+	  https://bugzilla.gnome.org/show_bug.cgi?id=762922
+
+2016-03-09 20:26:31 +0100  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst/vaapi/gstvaapidecodebin.c:
+	  vaapidecodebin: don't handle jpeg decoding
+	  As JPEG decoder has been split and demoted, it cannot be handled by
+	  vaapidecodebin
+	  Added a fixme comment regarding the future removal of vaapidecode.
+	  https://bugzilla.gnome.org/show_bug.cgi?id=734093
+
+2016-03-09 20:25:08 +0100  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst/vaapi/gstvaapidecode.c:
+	  vaapidecode: split out jpeg decoder
+	  Split, as a different element, the JPEG decoder.
+	  https://bugzilla.gnome.org/show_bug.cgi?id=734093
+
+2016-03-09 18:41:49 +0100  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst/vaapi/gstvaapi.c:
+	* gst/vaapi/gstvaapidecode.c:
+	* gst/vaapi/gstvaapidecode.h:
+	  vaapidecode: register decoder with internal GType
+	  Don't expose the the vaapidecode GType, instead expose a function
+	  which will register element.
+	  This is the first step to split the decoder by codecs.
+	  https://bugzilla.gnome.org/show_bug.cgi?id=734093
+
+2016-03-10 12:47:49 +0100  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst/vaapi/gstvaapidecode.c:
+	  vaapidecode: remove unused function declaration
+	  There is no need to pre-declare gst_vaapidecode_update_sink_caps(). And fixed
+	  code-style of the other pre-declared functions.
+
+2016-03-09 18:58:13 +0100  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* docs/plugins/Makefile.am:
+	  build: git ignore gtkdoc generated files
+
+2016-03-09 18:55:39 +0100  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* m4/Makefile.am:
+	  build: handle git ignore in m4 directory
+
+2016-03-04 20:17:54 -0300  Thiago Santos <thiagoss@osg.samsung.com>
+
+	* gst-libs/gst/vaapi/gstvaapidecoder_h265.c:
+	  vaapidecoder_h265: plug leak of h265 parsing info
+	  If something goes wrong while parsing, the info object is
+	  being leaked
+	  https://bugzilla.gnome.org/show_bug.cgi?id=763121
+
+2016-03-04 20:17:20 -0300  Thiago Santos <thiagoss@osg.samsung.com>
+
+	* gst-libs/gst/vaapi/gstvaapidecoder_h264.c:
+	  vaapidecoder_h264: plug leak of h264 parsing info
+	  If something goes wrong while parsing, the info object is
+	  being leaked
+	  https://bugzilla.gnome.org/show_bug.cgi?id=763121
+
+2016-03-09 11:03:28 +0900  Vineeth TM <vineeth.tm@samsung.com>
+
+	* gst/vaapi/gstvaapipluginutil.c:
+	  plugins: fix gstgl and vaapi memory leaks
+	  1\ Unref gl_display and gl_window as soon they are not needed.
+	  2\ Remove an unneeded display type check, since is handled by
+	  gst_vaapi_created_display_from_handle()
+	  3\ Unref vaapi's display if the display cannot be bind to a GL API.
+	  Modified-by: Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+	  https://bugzilla.gnome.org/show_bug.cgi?id=763354
+
+2016-03-09 14:13:24 +0900  Vineeth TM <vineeth.tm@samsung.com>
+
+	* gst-libs/gst/vaapi/gstvaapidisplay.c:
+	  vaapidisplay: Fix uninitialized value error for VA attribute
+	  https://bugzilla.gnome.org/show_bug.cgi?id=763362
+
+2016-03-08 10:47:56 +0100  Víctor Manuel Jáquez Leal <victorx.jaquez@intel.com>
+
+	* gst/vaapi/gstvaapidecode.c:
+	* gst/vaapi/gstvaapiencode.c:
+	  plugins: proxy information from downstream caps
+	  Propagate to upstream the downstream information, such as fps, par, etc.
+	  This will fix several "getcaps" critical warnings in gst-validate.
+	  https://bugzilla.gnome.org/show_bug.cgi?id=763300
+
+2016-03-04 10:51:42 +0200  Sreerenj Balachandran <sreerenj.balachandran@intel.com>
+
+	* gst-libs/gst/vaapi/gstvaapidecoder_vp9.c:
+	  decoder: vp9: Assign values for profile and bit_depth from frame header
+	  bit_depth field has added only in VA-API 0.39.0, added version check.
+
+2016-03-04 09:12:13 +0200  Sebastian Dröge <sebastian@centricular.com>
+
+	* Makefile.am:
+	  build: Dist gstreamer-vaapi.doap and configure.ac/autogen.sh
+	  https://bugzilla.gnome.org/show_bug.cgi?id=763067
+
 === release 1.7.90 ===
 
-2016-03-01  Sebastian Dröge <slomo@coaxion.net>
+2016-03-01 19:23:51 +0200  Sebastian Dröge <sebastian@centricular.com>
 
+	* ChangeLog:
+	* NEWS:
 	* configure.ac:
-	  releasing 1.7.90
+	* gstreamer-vaapi.doap:
+	  Release 1.7.90
 
 2016-03-01 16:14:47 +0200  Sebastian Dröge <sebastian@centricular.com>
 
diff -x .git -x .gitignore -Naur gstreamer-vaapi/configure.ac isg_gms-gstreamer-vaapi/configure.ac
--- gstreamer-vaapi/configure.ac	2016-08-09 02:31:44.148660664 +0800
+++ isg_gms-gstreamer-vaapi/configure.ac	2016-08-09 02:31:36.276519812 +0800
@@ -1,7 +1,7 @@
 # gstreamer-vaapi package version number
 m4_define([gst_vaapi_major_version], [1])
-m4_define([gst_vaapi_minor_version], [7])
-m4_define([gst_vaapi_micro_version], [90])
+m4_define([gst_vaapi_minor_version], [8])
+m4_define([gst_vaapi_micro_version], [2])
 m4_define([gst_vaapi_nano_version],  [0])
 m4_define([gst_vaapi_version],
           [gst_vaapi_major_version.gst_vaapi_minor_version.gst_vaapi_micro_version])
@@ -16,17 +16,17 @@
 dnl - interfaces added -> increment AGE
 dnl - interfaces removed -> AGE = 0
 # gstreamer-vaapi library (libtool) version number
-m4_define([gst_vaapi_lt_current],       [790])
+m4_define([gst_vaapi_lt_current],       [802])
 m4_define([gst_vaapi_lt_revision],      [0])
-m4_define([gst_vaapi_lt_age],           [790])
+m4_define([gst_vaapi_lt_age],           [802])
 
 # glib version number
 m4_define([glib_version], [2.32])
 
 # gstreamer version number
-m4_define([gst_version],                [1.7.90])
-m4_define([gst_plugins_base_version],   [1.7.90])
-m4_define([gst_plugins_bad_version],    [1.7.90])
+m4_define([gst_version],                [1.8.0])
+m4_define([gst_plugins_base_version],   [1.8.0])
+m4_define([gst_plugins_bad_version],    [1.8.0])
 
 # Wayland minimum version number
 m4_define([wayland_api_version], [1.0.2])
@@ -244,8 +244,8 @@
   [gstreamer-pbutils-$GST_API_VERSION], [$GST_PBREQ], [yes])
 
 dnl bitstream parsers (gstreamer-codecparsers)
-AG_GST_CHECK_MODULES([GST_CODEC_PARSERS],
-  [gstreamer-codecparsers-$GST_API_VERSION], [$GST_PBADREQ], [yes])
+AG_GST_PKG_CHECK_MODULES([GST_CODEC_PARSERS],
+  [gstreamer-codecparsers-$GST_API_VERSION >= 1.8.0 gstreamer-codecparsers-$GST_API_VERSION <= 1.8.99], [yes])
 
 AS_IF([test "x$enable_glx" = "xyes" -o "x$enable_egl" = "xyes"],
   [enable_opengl="yes"], [enable_opengl="no"])
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gms-integration isg_gms-gstreamer-vaapi/gms-integration
--- gstreamer-vaapi/gms-integration	1970-01-01 07:30:00.000000000 +0730
+++ isg_gms-gstreamer-vaapi/gms-integration	2016-08-09 02:31:36.276519812 +0800
@@ -0,0 +1,12 @@
+###
+### GMS integration
+###
+upstream a486942ba2d44ba2f60fec25175c681786021b48
+	decoder: h265: Fix offset calculation in codec_data parsing
+###
+### GMS integration
+###
+upstream 9701bb18eebd586f1cce43be3e4de7e103f5b88a
+	decoder: h265: handle the SEI NAL units included in codec_data
+topic/icamerasrc_support b4bb6982fc47a0f3fa62b5132c483ba00bec3923
+	Enable preview of RGB565-32 format on vaapipostproc
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapidecodebin.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapidecodebin.c
--- gstreamer-vaapi/gst/vaapi/gstvaapidecodebin.c	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapidecodebin.c	2016-08-09 02:31:36.312520456 +0800
@@ -99,6 +99,9 @@
 #if USE_VP8_DECODER
     GST_CAPS_CODEC("video/x-vp8")
 #endif
+#if USE_VP9_DECODER
+    GST_CAPS_CODEC("video/x-vp9")
+#endif
     ;
 /* *INDENT-ON* */
 
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapidecode.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapidecode.c
--- gstreamer-vaapi/gst/vaapi/gstvaapidecode.c	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapidecode.c	2016-08-09 02:31:36.312520456 +0800
@@ -133,6 +133,7 @@
 };
 
 static GstElementClass *parent_class = NULL;
+GST_VAAPI_PLUGIN_BASE_DEFINE_SET_CONTEXT (parent_class);
 
 static gboolean gst_vaapidecode_update_sink_caps (GstVaapiDecode * decode,
     GstCaps * caps);
@@ -1133,6 +1134,7 @@
     longname = g_strdup ("VA-API decoder");
   }
 
+  element_class->set_context = gst_vaapi_base_set_context;
   gst_element_class_set_static_metadata (element_class, longname,
       "Codec/Decoder/Video", GST_PLUGIN_DESC,
       "Gwenole Beauchesne <gwenole.beauchesne@intel.com>, "
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapidecode.h isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapidecode.h
--- gstreamer-vaapi/gst/vaapi/gstvaapidecode.h	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapidecode.h	2016-08-09 02:31:36.312520456 +0800
@@ -30,29 +30,7 @@
 
 G_BEGIN_DECLS
 
-#define GST_TYPE_VAAPIDECODE \
-    (gst_vaapidecode_get_type())
-
-#define GST_VAAPIDECODE(obj)                            \
-    (G_TYPE_CHECK_INSTANCE_CAST((obj),                  \
-                                GST_TYPE_VAAPIDECODE,   \
-                                GstVaapiDecode))
-
-#define GST_VAAPIDECODE_CLASS(klass)                    \
-    (G_TYPE_CHECK_CLASS_CAST((klass),                   \
-                             GST_TYPE_VAAPIDECODE,      \
-                             GstVaapiDecodeClass))
-
-#define GST_IS_VAAPIDECODE(obj) \
-    (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_VAAPIDECODE))
-
-#define GST_IS_VAAPIDECODE_CLASS(klass) \
-    (G_TYPE_CHECK_CLASS_TYPE((klass), GST_TYPE_VAAPIDECODE))
-
-#define GST_VAAPIDECODE_GET_CLASS(obj)                  \
-    (G_TYPE_INSTANCE_GET_CLASS((obj),                   \
-                               GST_TYPE_VAAPIDECODE,    \
-                               GstVaapiDecodeClass))
+#define GST_VAAPIDECODE(obj) ((GstVaapiDecode *)(obj))
 
 typedef struct _GstVaapiDecode                  GstVaapiDecode;
 typedef struct _GstVaapiDecodeClass             GstVaapiDecodeClass;
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapiencode.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapiencode.c
--- gstreamer-vaapi/gst/vaapi/gstvaapiencode.c	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapiencode.c	2016-08-09 02:31:36.312520456 +0800
@@ -44,6 +44,8 @@
     gst_vaapiencode, GST_TYPE_VIDEO_ENCODER,
     GST_VAAPI_PLUGIN_BASE_INIT_INTERFACES);
 
+GST_VAAPI_PLUGIN_BASE_DEFINE_SET_CONTEXT (gst_vaapiencode_parent_class);
+
 enum
 {
   PROP_0,
@@ -629,6 +631,7 @@
 
   object_class->finalize = gst_vaapiencode_finalize;
 
+  element_class->set_context = gst_vaapi_base_set_context;
   element_class->change_state =
       GST_DEBUG_FUNCPTR (gst_vaapiencode_change_state);
 
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapipluginbase.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapipluginbase.c
--- gstreamer-vaapi/gst/vaapi/gstvaapipluginbase.c	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapipluginbase.c	2016-08-09 02:31:36.312520456 +0800
@@ -35,8 +35,6 @@
 /* Default debug category is from the subclass */
 #define GST_CAT_DEFAULT (plugin->debug_category)
 
-static gpointer plugin_parent_class = NULL;
-
 /* GstVideoContext interface */
 static void
 plugin_set_display (GstVaapiPluginBase * plugin, GstVaapiDisplay * display)
@@ -57,18 +55,25 @@
   gst_vaapi_display_unref (display);
 }
 
-static void
-plugin_set_context (GstElement * element, GstContext * context)
+/**
+ * gst_vaapi_plugin_base_set_context:
+ * @plugin: a #GstVaapiPluginBase instance
+ * @context: a #GstContext to set
+ *
+ * This is a common set_context() element's vmethod for all the
+ * GStreamer VA-API elements.
+ *
+ * It normally should be used through the macro
+ * #GST_VAAPI_PLUGIN_BASE_DEFINE_SET_CONTEXT()
+ **/
+void
+gst_vaapi_plugin_base_set_context (GstVaapiPluginBase * plugin,
+    GstContext * context)
 {
-  GstVaapiPluginBase *const plugin = GST_VAAPI_PLUGIN_BASE (element);
-  GstElementClass *element_class = GST_ELEMENT_CLASS (plugin_parent_class);
   GstVaapiDisplay *display = NULL;
 
   if (gst_vaapi_video_context_get_display (context, &display))
     plugin_set_display (plugin, display);
-
-  if (element_class->set_context)
-    element_class->set_context (element, context);
 }
 
 void
@@ -180,14 +185,8 @@
 void
 gst_vaapi_plugin_base_class_init (GstVaapiPluginBaseClass * klass)
 {
-  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);
-
   klass->has_interface = default_has_interface;
   klass->display_changed = default_display_changed;
-
-  plugin_parent_class = g_type_class_peek_parent (klass);
-
-  element_class->set_context = GST_DEBUG_FUNCPTR (plugin_set_context);
 }
 
 void
@@ -693,8 +692,18 @@
     gst_buffer_pool_config_set_params (config, caps, size, min, max);
     gst_buffer_pool_config_add_option (config,
         GST_BUFFER_POOL_OPTION_VAAPI_VIDEO_META);
-    if (!gst_buffer_pool_set_config (pool, config))
-      goto config_failed;
+    if (!gst_buffer_pool_set_config (pool, config)) {
+      config = gst_buffer_pool_get_config (pool);
+
+      if (!gst_buffer_pool_config_validate_params (config, caps, size, min,
+              max)) {
+        gst_structure_free (config);
+        goto config_failed;
+      }
+
+      if (!gst_buffer_pool_set_config (pool, config))
+        goto config_failed;
+    }
   }
 
   /* Check whether GstVideoMeta, or GstVideoAlignment, is needed (raw video) */
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapipluginbase.h isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapipluginbase.h
--- gstreamer-vaapi/gst/vaapi/gstvaapipluginbase.h	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapipluginbase.h	2016-08-09 02:31:36.312520456 +0800
@@ -31,7 +31,7 @@
 #include <gst/video/gstvideosink.h>
 #include <gst/vaapi/gstvaapidisplay.h>
 
-#ifdef USE_GST_GL_HELPERS
+#if USE_GST_GL_HELPERS
 # include <gst/gl/gstglcontext.h>
 #endif
 
@@ -102,6 +102,16 @@
   (gst_vaapi_display_replace(&GST_VAAPI_PLUGIN_BASE_DISPLAY(plugin), \
        (new_display)))
 
+#define GST_VAAPI_PLUGIN_BASE_DEFINE_SET_CONTEXT(parent_class) \
+  static void \
+  gst_vaapi_base_set_context (GstElement * element, GstContext * context) \
+  { \
+    GstVaapiPluginBase *const plugin = GST_VAAPI_PLUGIN_BASE (element); \
+    \
+    gst_vaapi_plugin_base_set_context (plugin, context); \
+    GST_ELEMENT_CLASS (parent_class)->set_context (element, context); \
+  }
+
 struct _GstVaapiPluginBase
 {
   /*< private >*/
@@ -222,6 +232,11 @@
 
 G_GNUC_INTERNAL
 void
+gst_vaapi_plugin_base_set_context (GstVaapiPluginBase * plugin,
+    GstContext * context);
+
+G_GNUC_INTERNAL
+void
 gst_vaapi_plugin_base_set_gl_context (GstVaapiPluginBase * plugin,
     GstObject * object);
 
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapipluginutil.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapipluginutil.c
--- gstreamer-vaapi/gst/vaapi/gstvaapipluginutil.c	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapipluginutil.c	2016-08-09 02:31:36.312520456 +0800
@@ -103,6 +103,7 @@
   return display;
 }
 
+#if USE_GST_GL_HELPERS
 static GstVaapiDisplay *
 gst_vaapi_create_display_from_handle (GstVaapiDisplayType display_type,
     gpointer handle)
@@ -122,6 +123,7 @@
   }
   return NULL;
 }
+#endif
 
 static GstVaapiDisplay *
 gst_vaapi_create_display_from_gl_context (GstObject * gl_context_object)
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapipostproc.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapipostproc.c
--- gstreamer-vaapi/gst/vaapi/gstvaapipostproc.c	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapipostproc.c	2016-08-09 02:31:36.312520456 +0800
@@ -92,6 +92,8 @@
     G_IMPLEMENT_INTERFACE (GST_TYPE_COLOR_BALANCE,
         gst_vaapipostproc_colorbalance_init));
 
+GST_VAAPI_PLUGIN_BASE_DEFINE_SET_CONTEXT (gst_vaapipostproc_parent_class);
+
 static GstVideoFormat native_formats[] =
     { GST_VIDEO_FORMAT_NV12, GST_VIDEO_FORMAT_YV12, GST_VIDEO_FORMAT_I420 };
 
@@ -469,6 +471,25 @@
   return success;
 }
 
+static gboolean
+gst_vaapipostproc_colorcorrect (GstVaapiPostproc * postproc, GstBuffer * buf)
+{
+  GstVaapiVideoMeta *buf_meta;
+  GstVaapiSurface *buf_surface;
+  gboolean ret;
+
+  buf_meta = gst_buffer_get_vaapi_video_meta (buf);
+  if (!buf_meta) {
+    GST_ERROR ("No meta data!");
+    return FALSE;
+  }
+
+  buf_surface = gst_vaapi_video_meta_get_surface (buf_meta);
+  ret = gst_vaapi_filter_colorcorrect (postproc->filter, buf_surface, buf);
+
+  return ret;
+}
+
 static GstFlowReturn
 gst_vaapipostproc_process_vpp (GstBaseTransform * trans, GstBuffer * inbuf,
     GstBuffer * outbuf)
@@ -1181,6 +1202,8 @@
   GstBuffer *buf;
   GstFlowReturn ret;
 
+  gst_vaapipostproc_colorcorrect (postproc, inbuf);
+
   ret =
       gst_vaapi_plugin_base_get_input_buffer (GST_VAAPI_PLUGIN_BASE (postproc),
       inbuf, &buf);
@@ -1501,6 +1524,7 @@
 
   trans_class->prepare_output_buffer = gst_vaapipostproc_prepare_output_buffer;
 
+  element_class->set_context = gst_vaapi_base_set_context;
   gst_element_class_set_static_metadata (element_class,
       "VA-API video postprocessing",
       "Filter/Converter/Video;Filter/Converter/Video/Scaler;"
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapisink.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapisink.c
--- gstreamer-vaapi/gst/vaapi/gstvaapisink.c	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapisink.c	2016-08-09 02:31:36.312520456 +0800
@@ -107,6 +107,8 @@
     G_IMPLEMENT_INTERFACE (GST_TYPE_NAVIGATION,
         gst_vaapisink_navigation_iface_init));
 
+GST_VAAPI_PLUGIN_BASE_DEFINE_SET_CONTEXT (gst_vaapisink_parent_class);
+
 enum
 {
   HANDOFF_SIGNAL,
@@ -1213,34 +1215,31 @@
 gst_vaapisink_get_caps_impl (GstBaseSink * base_sink)
 {
   GstVaapiSink *const sink = GST_VAAPISINK_CAST (base_sink);
-  GstCaps *out_caps, *raw_caps;
+  GstCaps *out_caps, *raw_caps, *feature_caps;
   static const char surface_caps_str[] =
       GST_VAAPI_MAKE_ENC_SURFACE_CAPS ";"
       GST_VIDEO_CAPS_MAKE_WITH_FEATURES (GST_CAPS_FEATURE_MEMORY_VAAPI_SURFACE
       "," GST_CAPS_FEATURE_META_GST_VIDEO_OVERLAY_COMPOSITION,
       "{ ENCODED, NV12, I420, YV12 }");
+  GstCapsFeatures *const features = gst_caps_features_new
+      (GST_CAPS_FEATURE_META_GST_VIDEO_OVERLAY_COMPOSITION, NULL);
+
+  if (!GST_VAAPI_PLUGIN_BASE_DISPLAY (sink))
+    return gst_static_pad_template_get_caps (&gst_vaapisink_sink_factory);
 
   out_caps = gst_caps_from_string (surface_caps_str);
+  raw_caps =
+      gst_vaapi_plugin_base_get_allowed_raw_caps (GST_VAAPI_PLUGIN_BASE (sink));
+  if (!raw_caps)
+    return out_caps;
+
+  out_caps = gst_caps_make_writable (out_caps);
+  gst_caps_append (out_caps, gst_caps_copy (raw_caps));
+
+  feature_caps = gst_caps_copy (raw_caps);
+  gst_caps_set_features (feature_caps, 0, features);
+  gst_caps_append (out_caps, feature_caps);
 
-  if (GST_VAAPI_PLUGIN_BASE_DISPLAY (sink)) {
-    raw_caps =
-        gst_vaapi_plugin_base_get_allowed_raw_caps (GST_VAAPI_PLUGIN_BASE
-        (sink));
-    if (raw_caps) {
-      GstCaps *feature_caps;
-      GstCapsFeatures *const features =
-          gst_caps_features_new
-          (GST_CAPS_FEATURE_META_GST_VIDEO_OVERLAY_COMPOSITION, NULL);
-
-      out_caps = gst_caps_make_writable (out_caps);
-
-      gst_caps_append (out_caps, gst_caps_copy (raw_caps));
-
-      feature_caps = gst_caps_copy (raw_caps);
-      gst_caps_set_features (feature_caps, 0, features);
-      gst_caps_append (out_caps, feature_caps);
-    }
-  }
   return out_caps;
 }
 
@@ -1663,6 +1662,7 @@
 
   videosink_class->show_frame = GST_DEBUG_FUNCPTR (gst_vaapisink_show_frame);
 
+  element_class->set_context = gst_vaapi_base_set_context;
   element_class->set_bus = gst_vaapisink_set_bus;
   gst_element_class_set_static_metadata (element_class,
       "VA-API sink", "Sink/Video", GST_PLUGIN_DESC,
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapivideobufferpool.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapivideobufferpool.c
--- gstreamer-vaapi/gst/vaapi/gstvaapivideobufferpool.c	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapivideobufferpool.c	2016-08-09 02:31:36.316520529 +0800
@@ -141,7 +141,7 @@
   GstVideoInfo *const new_vip = &priv->video_info[!priv->video_info_index];
   GstVideoAlignment align;
   GstAllocator *allocator;
-  gboolean changed_caps, use_dmabuf_memory;
+  gboolean changed_caps, use_dmabuf_memory, ret, updated = FALSE;
 
   if (!gst_buffer_pool_config_get_params (config, &caps, NULL, NULL, NULL))
     goto error_invalid_config;
@@ -191,6 +191,21 @@
 
   priv->has_video_meta = gst_buffer_pool_config_has_option (config,
       GST_BUFFER_POOL_OPTION_VIDEO_META);
+  if (!priv->has_video_meta) {
+    gint i;
+    for (i = 0; i < GST_VIDEO_INFO_N_PLANES (new_vip); i++) {
+      if (GST_VIDEO_INFO_PLANE_OFFSET (new_vip, i) !=
+          GST_VIDEO_INFO_PLANE_OFFSET (&priv->alloc_info, i) ||
+          GST_VIDEO_INFO_PLANE_STRIDE (new_vip, i) !=
+          GST_VIDEO_INFO_PLANE_STRIDE (&priv->alloc_info, i)) {
+        priv->has_video_meta = TRUE;
+        gst_buffer_pool_config_add_option (config,
+            GST_BUFFER_POOL_OPTION_VIDEO_META);
+        updated = TRUE;
+        break;
+      }
+    }
+  }
 
   priv->has_video_alignment = gst_buffer_pool_config_has_option (config,
       GST_BUFFER_POOL_OPTION_VIDEO_ALIGNMENT);
@@ -202,9 +217,10 @@
   priv->has_texture_upload_meta = gst_buffer_pool_config_has_option (config,
       GST_BUFFER_POOL_OPTION_VIDEO_GL_TEXTURE_UPLOAD_META);
 
-  return
+  ret =
       GST_BUFFER_POOL_CLASS
       (gst_vaapi_video_buffer_pool_parent_class)->set_config (pool, config);
+  return !updated && ret;
 
   /* ERRORS */
 error_invalid_config:
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapivideocontext.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapivideocontext.c
--- gstreamer-vaapi/gst/vaapi/gstvaapivideocontext.c	2016-08-09 02:31:44.196661524 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapivideocontext.c	2016-08-09 02:31:36.316520529 +0800
@@ -141,6 +141,9 @@
     return FALSE;
 
   gst_query_parse_context (query, &ctxt);
+  if (!ctxt)
+    return FALSE;
+
   GST_CAT_INFO_OBJECT (GST_CAT_CONTEXT, element,
       "found context (%" GST_PTR_FORMAT ") in %s query", ctxt,
       direction == GST_PAD_SRC ? "downstream" : "upstream");
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst/vaapi/gstvaapivideometa_texture.c isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapivideometa_texture.c
--- gstreamer-vaapi/gst/vaapi/gstvaapivideometa_texture.c	2016-08-09 02:31:44.216661882 +0800
+++ isg_gms-gstreamer-vaapi/gst/vaapi/gstvaapivideometa_texture.c	2016-08-09 02:31:36.316520529 +0800
@@ -40,7 +40,7 @@
 struct _GstVaapiVideoMetaTexture
 {
   GstVaapiTexture *texture;
-  GstVideoGLTextureType texture_type;
+  GstVideoGLTextureType texture_type[4];
   guint gl_format;
   guint width;
   guint height;
@@ -73,15 +73,17 @@
 meta_texture_ensure_format (GstVaapiVideoMetaTexture * meta,
     GstVideoFormat format)
 {
+  memset (meta->texture_type, 0, sizeof (meta->texture_type));
+
   switch (format) {
     case GST_VIDEO_FORMAT_RGBA:
       meta->gl_format = GL_RGBA;
-      meta->texture_type = GST_VIDEO_GL_TEXTURE_TYPE_RGBA;
+      meta->texture_type[0] = GST_VIDEO_GL_TEXTURE_TYPE_RGBA;
       break;
     case GST_VIDEO_FORMAT_BGRA:
       meta->gl_format = GL_BGRA_EXT;
       /* FIXME: add GST_VIDEO_GL_TEXTURE_TYPE_BGRA extension */
-      meta->texture_type = GST_VIDEO_GL_TEXTURE_TYPE_RGBA;
+      meta->texture_type[0] = GST_VIDEO_GL_TEXTURE_TYPE_RGBA;
       break;
     default:
       goto error_unsupported_format;
@@ -155,7 +157,7 @@
   if (!copy)
     return NULL;
 
-  copy->texture_type = meta->texture_type;
+  memcpy (copy->texture_type, meta->texture_type, sizeof (meta->texture_type));
   copy->gl_format = meta->gl_format;
   copy->width = meta->width;
   copy->height = meta->height;
@@ -220,7 +222,7 @@
 
   meta = gst_buffer_add_video_gl_texture_upload_meta (buffer,
       GST_VIDEO_GL_TEXTURE_ORIENTATION_X_NORMAL_Y_NORMAL,
-      1, &meta_texture->texture_type, gst_vaapi_texture_upload,
+      1, meta_texture->texture_type, gst_vaapi_texture_upload,
       meta_texture, (GBoxedCopyFunc) meta_texture_copy,
       (GBoxedFreeFunc) meta_texture_free);
   if (!meta)
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapicodedbufferpool.c isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapicodedbufferpool.c
--- gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapicodedbufferpool.c	2016-08-09 02:31:44.172661094 +0800
+++ isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapicodedbufferpool.c	2016-08-09 02:31:36.276519812 +0800
@@ -54,6 +54,7 @@
 static void
 coded_buffer_pool_finalize (GstVaapiCodedBufferPool * pool)
 {
+  gst_vaapi_video_pool_finalize (GST_VAAPI_VIDEO_POOL (pool));
   gst_vaapi_object_replace (&pool->context, NULL);
 }
 
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapidecoder_h265.c isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapidecoder_h265.c
--- gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapidecoder_h265.c	2016-08-09 02:31:44.172661094 +0800
+++ isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapidecoder_h265.c	2016-08-09 02:31:36.280519883 +0800
@@ -623,6 +623,15 @@
 }
 
 static void
+dpb_remove_all (GstVaapiDecoderH265 * decoder)
+{
+  GstVaapiDecoderH265Private *const priv = &decoder->priv;
+
+  while (priv->dpb_count > 0)
+    gst_vaapi_frame_store_replace (&priv->dpb[--priv->dpb_count], NULL);
+}
+
+static void
 dpb_remove_index (GstVaapiDecoderH265 * decoder, gint index)
 {
   GstVaapiDecoderH265Private *const priv = &decoder->priv;
@@ -745,9 +754,7 @@
   guint i;
 
   if (hard_flush) {
-    for (i = 0; i < priv->dpb_count; i++)
-      dpb_remove_index (decoder, i);
-    priv->dpb_count = 0;
+    dpb_remove_all (decoder);
   } else {
     /* Remove unused pictures from DPB */
     i = 0;
@@ -2650,13 +2657,15 @@
   ofs = 23;
   for (i = 0; i < num_nal_arrays; i++) {
     num_nals = GST_READ_UINT16_BE (buf + ofs + 1);
+    ofs += 3;
+
     for (j = 0; j < num_nals; j++) {
       pi = gst_vaapi_parser_info_h265_new ();
       if (!pi)
         return GST_VAAPI_DECODER_STATUS_ERROR_ALLOCATION_FAILED;
       unit.parsed_info = pi;
       result = gst_h265_parser_identify_nalu_hevc (priv->parser,
-          buf, ofs + 3, buf_size, 2, &pi->nalu);
+          buf, ofs, buf_size, 2, &pi->nalu);
       if (result != GST_H265_PARSER_OK) {
         status = get_status (result);
         goto cleanup;
@@ -2687,6 +2696,16 @@
           if (status != GST_VAAPI_DECODER_STATUS_SUCCESS)
             goto cleanup;
           break;
+        case GST_H265_NAL_SUFFIX_SEI:
+        case GST_H265_NAL_PREFIX_SEI:
+          status = parse_sei (decoder, &unit);
+          if (status != GST_VAAPI_DECODER_STATUS_SUCCESS)
+            goto cleanup;
+          status = decode_sei (decoder, &unit);
+          if (status != GST_VAAPI_DECODER_STATUS_SUCCESS)
+            goto cleanup;
+          break;
+
       }
       ofs = pi->nalu.offset + pi->nalu.size;
       gst_vaapi_parser_info_h265_replace (&pi, NULL);
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapifilter.c isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapifilter.c
--- gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapifilter.c	2016-08-09 02:31:44.180661239 +0800
+++ isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapifilter.c	2016-08-09 02:31:36.288520028 +0800
@@ -38,6 +38,12 @@
 #define GST_VAAPI_FILTER(obj) \
     ((GstVaapiFilter *)(obj))
 
+// Color conversion
+#define RGB565_32_TO_RGBX(color) \
+       ((color & 0x00070000) | (color & 0x001f0000)<<3) | \
+       ((color & 0x00000300) | (color & 0x00003f00)<<2) | \
+       ((color & 0x00000007) | (color & 0x0000001f)<<3)
+
 typedef struct _GstVaapiFilterOpData GstVaapiFilterOpData;
 struct _GstVaapiFilterOpData
 {
@@ -1877,3 +1883,34 @@
   return op_set_skintone (filter,
       find_operation (filter, GST_VAAPI_FILTER_OP_SKINTONE), enhance);
 }
+
+gboolean
+gst_vaapi_filter_colorcorrect (GstVaapiFilter * filter,
+    GstVaapiSurface * surface, GstBuffer * buf)
+{
+  GstMapInfo map;
+  guint w, h, width, height;
+  guint32 *pixel;
+
+  g_return_val_if_fail (filter != NULL, FALSE);
+  g_return_val_if_fail (surface != NULL, FALSE);
+
+  if (surface->chroma_type == GST_VAAPI_CHROMA_TYPE_RGB16_32BPP) {
+    width = surface->width;
+    height = surface->height;
+
+    gst_buffer_map (buf, &map, GST_MAP_WRITE | GST_MAP_READ);
+
+    pixel = (gint32 *) map.data;
+    for (w = 0; w < width; w++) {
+      for (h = 0; h < height; h++) {
+        *(pixel) = RGB565_32_TO_RGBX (*(pixel));
+        pixel++;
+      }
+    }
+
+    gst_buffer_unmap (buf, &map);
+  }
+
+  return TRUE;
+}
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapifilter.h isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapifilter.h
--- gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapifilter.h	2016-08-09 02:31:44.180661239 +0800
+++ isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapifilter.h	2016-08-09 02:31:36.288520028 +0800
@@ -246,4 +246,8 @@
 gst_vaapi_filter_set_skintone (GstVaapiFilter * filter,
     gboolean enhance);
 
+gboolean
+gst_vaapi_filter_colorcorrect (GstVaapiFilter * filter,
+    GstVaapiSurface * surface, GstBuffer * buf);
+
 #endif /* GST_VAAPI_FILTER_H */
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapisurface.c isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapisurface.c
--- gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapisurface.c	2016-08-09 02:31:44.180661239 +0800
+++ isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapisurface.c	2016-08-09 02:31:36.308520384 +0800
@@ -624,6 +624,7 @@
   GstVaapiDisplay *display;
   VAImage va_image;
   VAStatus status;
+  GstVaapiImage *image;
 
   g_return_val_if_fail (surface != NULL, NULL);
 
@@ -640,7 +641,10 @@
   if (va_image.image_id == VA_INVALID_ID || va_image.buf == VA_INVALID_ID)
     return NULL;
 
-  return gst_vaapi_image_new_with_image (display, &va_image);
+  image = gst_vaapi_image_new_with_image (display, &va_image);
+  if (!image)
+    vaDestroyImage (GST_VAAPI_DISPLAY_VADISPLAY (display), va_image.image_id);
+  return image;
 }
 
 /**
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapisurface.h isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapisurface.h
--- gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapisurface.h	2016-08-09 02:31:43.936656872 +0800
+++ isg_gms-gstreamer-vaapi/gst-libs/gst/vaapi/gstvaapisurface.h	2016-08-09 02:31:36.308520384 +0800
@@ -66,6 +66,7 @@
  * @GST_VAAPI_CHROMA_TYPE_RGB32: 32-bit RGB chroma format
  * @GST_VAAPI_CHROMA_TYPE_RGB16: 16-bit RGB chroma format
  * @GST_VAAPI_CHROMA_TYPE_YUV420_10BPP: YUV 4:2:0 chroma format, more than 8 bits per channel
+ * @GST_VAAPI_CHROMA_TYPE_RGB16_32BPP: 32-bit RGB565 chroma format (special)
  *
  * The set of all chroma types for #GstVaapiSurface.
  */
@@ -79,7 +80,8 @@
   GST_VAAPI_CHROMA_TYPE_YUV400,
   GST_VAAPI_CHROMA_TYPE_RGB32,
   GST_VAAPI_CHROMA_TYPE_RGB16,
-  GST_VAAPI_CHROMA_TYPE_YUV420_10BPP
+  GST_VAAPI_CHROMA_TYPE_YUV420_10BPP,
+  GST_VAAPI_CHROMA_TYPE_RGB16_32BPP
 } GstVaapiChromaType;
 
 /**
diff -x .git -x .gitignore -Naur gstreamer-vaapi/gstreamer-vaapi.doap isg_gms-gstreamer-vaapi/gstreamer-vaapi.doap
--- gstreamer-vaapi/gstreamer-vaapi.doap	2016-08-09 02:31:44.216661882 +0800
+++ isg_gms-gstreamer-vaapi/gstreamer-vaapi.doap	2016-08-09 02:31:36.316520529 +0800
@@ -27,6 +27,42 @@
 
  <release>
   <Version>
+   <revision>1.8.2</revision>
+   <branch>1.8</branch>
+   <created>2016-06-09</created>
+   <file-release rdf:resource="http://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-1.8.2.tar.xz" />
+  </Version>
+ </release>
+
+ <release>
+  <Version>
+   <revision>1.8.1</revision>
+   <branch>1.8</branch>
+   <created>2016-04-20</created>
+   <file-release rdf:resource="http://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-1.8.1.tar.xz" />
+  </Version>
+ </release>
+
+ <release>
+  <Version>
+   <revision>1.8.0</revision>
+   <branch>master</branch>
+   <created>2016-03-24</created>
+   <file-release rdf:resource="http://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-1.8.0.tar.xz" />
+  </Version>
+ </release>
+
+ <release>
+  <Version>
+   <revision>1.7.91</revision>
+   <branch>master</branch>
+   <created>2016-03-15</created>
+   <file-release rdf:resource="http://gstreamer.freedesktop.org/src/gstreamer-vaapi/gstreamer-vaapi-1.7.91.tar.xz" />
+  </Version>
+ </release>
+
+ <release>
+  <Version>
    <revision>1.7.90</revision>
    <branch>master</branch>
    <created>2016-03-01</created>
diff -x .git -x .gitignore -Naur gstreamer-vaapi/NEWS isg_gms-gstreamer-vaapi/NEWS
--- gstreamer-vaapi/NEWS	2016-08-09 02:31:44.148660664 +0800
+++ isg_gms-gstreamer-vaapi/NEWS	2016-08-09 02:31:36.276519812 +0800
@@ -1 +1,26 @@
-This is gstreamer-vaapi 1.7.90.
+### 1.8.2
+
+The first 1.8 bug-fix release (1.8.2) was released on 9 June 2016.
+This release only contains bugfixes and it should be safe to update from 1.8.0.
+
+#### Major bugfixes in 1.8.2
+
+ - Fix vp8enc and flacenc segmentation faults on Windows
+ - Fix Android build failure due to BSD sed on OS X
+ - Fix Android build failure with applications targetting API > 20
+ - Fix playback of live MS SmoothStreaming streams
+ - Fix various issues with vtdec and caopengllayersink on OS X
+ - Fix severe performance degradation in various image decoders
+ - Fix sample rate negotiation in opusdec
+ - Fix regression in typefind, causing deadlocks in some situations
+ - Fix mpegtsmux to set PTS on all output buffers again
+ - Fix extraction of frame dimensions from SDP in RTP JPEG depayloader
+ - Fix failure in v4l2videodec when setting of format fails after starting
+ - ... and many, many more!
+
+For a full list of bugfixes see [Bugzilla][buglist-1.8.2]. Note that this is
+not the full list of changes. For the full list of changes please refer to the
+GIT logs or ChangeLogs of the particular modules.
+
+[buglist-1.8.2]: https://bugzilla.gnome.org/buglist.cgi?bug_status=RESOLVED&bug_status=VERIFIED&classification=Platform&limit=0&list_id=130196&order=bug_id&product=GStreamer&query_format=advanced&resolution=FIXED&target_milestone=1.8.2
+
diff -x .git -x .gitignore -Naur gstreamer-vaapi/tests/test-display.c isg_gms-gstreamer-vaapi/tests/test-display.c
--- gstreamer-vaapi/tests/test-display.c	2016-08-09 02:31:44.216661882 +0800
+++ isg_gms-gstreamer-vaapi/tests/test-display.c	2016-08-09 02:31:36.316520529 +0800
@@ -269,8 +269,14 @@
 int
 main(int argc, char *argv[])
 {
-    GstVaapiDisplay *display, *display2;
-    guint width, height, par_n, par_d;
+  GstVaapiDisplay *display;
+#if USE_X11
+  GstVaapiDisplay *display2;
+#endif
+#if USE_X11 || USE_WAYLAND
+  guint width, height;
+  guint par_n, par_d;
+#endif
 
     gst_init(&argc, &argv);
 
