diff -x .git -x .gitignore -Naur libva/gms-integration isg_gms-libva/gms-integration
--- libva/gms-integration	1970-01-01 07:30:00.000000000 +0730
+++ isg_gms-libva/gms-integration	2016-08-09 02:29:50.842633371 +0800
@@ -0,0 +1,5 @@
+###
+### GMS integration
+###
+upstream_v1.7 fa5e03f46ffcc1d609676442db7cfd036a16c078
+	libva 1.7.1
diff -x .git -x .gitignore -Naur libva/test/basic/test_05.c isg_gms-libva/test/basic/test_05.c
--- libva/test/basic/test_05.c	2016-08-09 02:29:56.774739508 +0800
+++ isg_gms-libva/test/basic/test_05.c	2016-08-09 02:29:50.842633371 +0800
@@ -36,7 +36,7 @@
 {
     int max_entrypoints;
     int num_entrypoints;
-    int i, j, k;
+    int i, j;
     int config_count = 0;
     max_entrypoints = vaMaxNumEntrypoints(va_dpy);
     ASSERT(max_entrypoints > 0);
@@ -44,6 +44,7 @@
     ASSERT(entrypoints);
 
     VAConfigID *configs = malloc(max_entrypoints * num_profiles * sizeof(VAConfigID));
+    ASSERT(configs);
 
     for(i = 0; i < num_profiles; i++)
     {
diff -x .git -x .gitignore -Naur libva/test/basic/test_06.c isg_gms-libva/test/basic/test_06.c
--- libva/test/basic/test_06.c	2016-08-09 02:29:56.774739508 +0800
+++ isg_gms-libva/test/basic/test_06.c	2016-08-09 02:29:50.842633371 +0800
@@ -36,7 +36,7 @@
 
 void pre()
 {
-    int i, j, k;
+    int i, j;
 
     test_init();
     test_profiles();
@@ -74,6 +74,7 @@
     ASSERT(max_attribs > 0);
 
     VAConfigAttrib *attrib_list = malloc(max_attribs * sizeof(VAConfigAttrib));
+    ASSERT(attrib_list);
 
     config_count = 0;
     for(i = 0; i < num_profiles; i++)
diff -x .git -x .gitignore -Naur libva/test/basic/test_07.c isg_gms-libva/test/basic/test_07.c
--- libva/test/basic/test_07.c	2016-08-09 02:29:56.774739508 +0800
+++ isg_gms-libva/test/basic/test_07.c	2016-08-09 02:29:50.842633371 +0800
@@ -84,7 +84,7 @@
     test_unique_surfaces(surfaces_4, 4, surfaces_16, 4);
     test_unique_surfaces(surfaces_4, 4, surfaces_16, 16);
     test_unique_surfaces(surfaces_4, 1, surfaces_16, 16);
-    test_unique_surfaces(surfaces_1, 16, surfaces_16, 16);
+    test_unique_surfaces(surfaces_1, 1, surfaces_16, 16);
 
     status("vaDestroySurface 4 surfaces\n");
     va_status = vaDestroySurfaces(va_dpy, surfaces_4, 4);
@@ -98,7 +98,7 @@
 
     test_unique_surfaces(surfaces_1, 1, surfaces_6, 6);
     test_unique_surfaces(surfaces_6, 6, surfaces_16, 16);
-    test_unique_surfaces(surfaces_1, 6, surfaces_16, 6);
+    test_unique_surfaces(surfaces_1, 1, surfaces_16, 6);
 
     status("vaDestroySurface 16 surfaces\n");
     va_status = vaDestroySurfaces(va_dpy, surfaces_16, 16);
diff -x .git -x .gitignore -Naur libva/test/basic/test_09.c isg_gms-libva/test/basic/test_09.c
--- libva/test/basic/test_09.c	2016-08-09 02:29:56.774739508 +0800
+++ isg_gms-libva/test/basic/test_09.c	2016-08-09 02:29:50.842633371 +0800
@@ -36,7 +36,7 @@
 {
     int max_entrypoints;
     int num_entrypoints;
-    int i, j, k;
+    int i, j;
     int config_count = 0;
     max_entrypoints = vaMaxNumEntrypoints(va_dpy);
     ASSERT(max_entrypoints > 0);
@@ -44,7 +44,9 @@
     ASSERT(entrypoints);
 
     VAConfigID *configs = malloc(max_entrypoints * num_profiles * sizeof(VAConfigID));
+    ASSERT(configs);
     VAContextID *contexts = malloc(max_entrypoints * num_profiles * sizeof(VAContextID));
+    ASSERT(contexts);
 
     for(i = 0; i < num_profiles; i++)
     {
@@ -67,6 +69,7 @@
     int total_surfaces = config_count * surface_count;
     
     VASurfaceID *surfaces = malloc(total_surfaces * sizeof(VASurfaceID));
+    ASSERT(surfaces);
 
     // TODO: Don't assume VA_RT_FORMAT_YUV420 is supported / needed for each config
     va_status = vaCreateSurfaces(va_dpy, VA_RT_FORMAT_YUV420, width, height, surfaces, total_surfaces, NULL, 0);
diff -x .git -x .gitignore -Naur libva/test/basic/test_10.c isg_gms-libva/test/basic/test_10.c
--- libva/test/basic/test_10.c	2016-08-09 02:29:56.774739508 +0800
+++ isg_gms-libva/test/basic/test_10.c	2016-08-09 02:29:50.842633371 +0800
@@ -45,6 +45,7 @@
     total_surfaces = surface_count;
     
     surfaces = malloc(total_surfaces * sizeof(VASurfaceID));
+    assert(surfaces);
 
     // TODO: Don't assume VA_RT_FORMAT_YUV420 is supported / needed for each config
     va_status = vaCreateSurfaces(va_dpy, VA_RT_FORMAT_YUV420, width, height, surfaces, total_surfaces, NULL, 0);
diff -x .git -x .gitignore -Naur libva/test/basic/test_11.c isg_gms-libva/test/basic/test_11.c
--- libva/test/basic/test_11.c	2016-08-09 02:29:56.774739508 +0800
+++ isg_gms-libva/test/basic/test_11.c	2016-08-09 02:29:50.842633371 +0800
@@ -45,6 +45,7 @@
     total_surfaces = surface_count;
     
     surfaces = malloc(total_surfaces * sizeof(VASurfaceID));
+    assert(surfaces);
 
     // TODO: Don't assume VA_RT_FORMAT_YUV420 is supported / needed for each config
     va_status = vaCreateSurfaces(va_dpy, VA_RT_FORMAT_YUV420, width, height, surfaces, total_surfaces, NULL, 0);
diff -x .git -x .gitignore -Naur libva/test/basic/test_common.c isg_gms-libva/test/basic/test_common.c
--- libva/test/basic/test_common.c	2016-08-09 02:29:56.774739508 +0800
+++ isg_gms-libva/test/basic/test_common.c	2016-08-09 02:29:50.842633371 +0800
@@ -109,6 +109,12 @@
         PROFILE(VC1Advanced)
         PROFILE(JPEGBaseline)
         PROFILE(VP8Version0_3)
+        PROFILE(HEVCMain)
+        PROFILE(HEVCMain10)
+        PROFILE(VP9Profile0)
+        PROFILE(VP9Profile1)
+        PROFILE(VP9Profile2)
+        PROFILE(VP9Profile3)
     }
     ASSERT(0);
     return "Unknown";
@@ -127,6 +133,7 @@
         ENTRYPOINT(Deblocking)
         ENTRYPOINT(EncSlice)
         ENTRYPOINT(EncPicture)
+        ENTRYPOINT(EncSliceLP)
         ENTRYPOINT(VideoProc)
     }
     ASSERT(0);
diff -x .git -x .gitignore -Naur libva/test/decode/tinyjpeg.c isg_gms-libva/test/decode/tinyjpeg.c
--- libva/test/decode/tinyjpeg.c	2016-08-09 02:29:56.774739508 +0800
+++ isg_gms-libva/test/decode/tinyjpeg.c	2016-08-09 02:29:50.846633442 +0800
@@ -154,19 +154,23 @@
 static int build_default_huffman_tables(struct jdec_private *priv)
 {
     int i = 0;
-	if (priv->default_huffman_table_initialized)
-		return 0;
+    if (priv->default_huffman_table_initialized)
+        return 0;
 
     for (i = 0; i < 4; i++) {
         priv->HTDC_valid[i] = 1;
-        memcpy(priv->HTDC[i].bits, default_huffman_table_param.huffman_table[i].num_dc_codes, 16);
-        memcpy(priv->HTDC[i].values, default_huffman_table_param.huffman_table[i].dc_values, 16);
+        memcpy(priv->HTDC[i].bits, default_huffman_table_param.huffman_table[i%2].num_dc_codes,
+               sizeof(default_huffman_table_param.huffman_table[i%2].num_dc_codes));
+        memcpy(priv->HTDC[i].values, default_huffman_table_param.huffman_table[i%2].dc_values,
+               sizeof(default_huffman_table_param.huffman_table[i%2].dc_values));
         priv->HTAC_valid[i] = 1;
-        memcpy(priv->HTAC[i].bits, default_huffman_table_param.huffman_table[i].num_ac_codes, 16);
-        memcpy(priv->HTAC[i].values, default_huffman_table_param.huffman_table[i].ac_values, 256);
+        memcpy(priv->HTAC[i].bits, default_huffman_table_param.huffman_table[i%2].num_ac_codes,
+               sizeof(default_huffman_table_param.huffman_table[i%2].num_ac_codes));
+        memcpy(priv->HTAC[i].values, default_huffman_table_param.huffman_table[i%2].ac_values,
+               sizeof(default_huffman_table_param.huffman_table[i%2].ac_values));
     }
-	priv->default_huffman_table_initialized = 1;
-	return 0;
+    priv->default_huffman_table_initialized = 1;
+    return 0;
 }
 
 
diff -x .git -x .gitignore -Naur libva/test/encode/avcenc.c isg_gms-libva/test/encode/avcenc.c
--- libva/test/encode/avcenc.c	2016-08-09 02:29:56.798739937 +0800
+++ isg_gms-libva/test/encode/avcenc.c	2016-08-09 02:29:50.846633442 +0800
@@ -953,6 +953,7 @@
 {
     bs->max_size_in_dword = BITSTREAM_ALLOCATE_STEPPING;
     bs->buffer = calloc(bs->max_size_in_dword * sizeof(int), 1);
+    assert(bs->buffer);
     bs->bit_offset = 0;
 }
 
@@ -990,6 +991,7 @@
         if (pos + 1 == bs->max_size_in_dword) {
             bs->max_size_in_dword += BITSTREAM_ALLOCATE_STEPPING;
             bs->buffer = realloc(bs->buffer, bs->max_size_in_dword * sizeof(unsigned int));
+            assert(bs->buffer);
         }
 
         bs->buffer[pos + 1] = val;
@@ -1874,7 +1876,7 @@
     picture_height_in_mbs = (picture_height + 15) / 16;
 
     if (argc > 5) {
-        char o;
+        int o;
 
         optind = 5;
 
diff -x .git -x .gitignore -Naur libva/test/encode/h264encode.c isg_gms-libva/test/encode/h264encode.c
--- libva/test/encode/h264encode.c	2016-08-09 02:29:56.798739937 +0800
+++ isg_gms-libva/test/encode/h264encode.c	2016-08-09 02:29:50.846633442 +0800
@@ -197,6 +197,7 @@
 {
     bs->max_size_in_dword = BITSTREAM_ALLOCATE_STEPPING;
     bs->buffer = calloc(bs->max_size_in_dword * sizeof(int), 1);
+    assert(bs->buffer);
     bs->bit_offset = 0;
 }
 
@@ -234,6 +235,7 @@
         if (pos + 1 == bs->max_size_in_dword) {
             bs->max_size_in_dword += BITSTREAM_ALLOCATE_STEPPING;
             bs->buffer = realloc(bs->buffer, bs->max_size_in_dword * sizeof(unsigned int));
+            assert(bs->buffer);
         }
 
         bs->buffer[pos + 1] = val;
@@ -858,7 +860,7 @@
 
 static int process_cmdline(int argc, char *argv[])
 {
-    char c;
+    int c;
     const struct option long_opts[] = {
         {"help", no_argument, NULL, 0 },
         {"bitrate", required_argument, NULL, 1 },
@@ -1940,13 +1942,47 @@
     if (srcyuv_fourcc == VA_FOURCC_NV12) {
         int uv_size = 2 * (frame_width/2) * (frame_height/2);
         dst_Y = malloc(2*uv_size);
+        if(dst_Y == NULL) {
+           printf("Failed to allocate memory for dst_Y\n");
+           exit(1);
+        }
+
         dst_U = malloc(uv_size);
+        if(dst_U == NULL) {
+           printf("Failed to allocate memory for dst_U\n");
+           free(dst_Y);
+           exit(1);
+        }
+
+        memset(dst_Y, 0, 2*uv_size);
+        memset(dst_U, 0, uv_size);
     } else if (srcyuv_fourcc == VA_FOURCC_IYUV ||
                srcyuv_fourcc == VA_FOURCC_YV12) {
         int uv_size = (frame_width/2) * (frame_height/2);
         dst_Y = malloc(4*uv_size);
+        if(dst_Y == NULL) {
+           printf("Failed to allocate memory for dst_Y\n");
+           exit(1);
+        }
+
         dst_U = malloc(uv_size);
+        if(dst_U == NULL) {
+           printf("Failed to allocate memory for dst_U\n");
+           free(dst_Y);
+           exit(1);
+        }
+
         dst_V = malloc(uv_size);
+        if(dst_V == NULL) {
+           printf("Failed to allocate memory for dst_V\n");
+           free(dst_Y);
+           free(dst_U);
+           exit(1);
+        }
+
+        memset(dst_Y, 0, 4*uv_size);
+        memset(dst_U, 0, uv_size);
+        memset(dst_V, 0, uv_size);
     } else {
         printf("Unsupported source YUV format\n");
         exit(1);
@@ -1973,9 +2009,6 @@
             fwrite(dst_V, uv_size, 1, recyuv_fp);
             fwrite(dst_U, uv_size, 1, recyuv_fp);
         }
-    } else {
-        printf("Unsupported YUV format\n");
-        exit(1);
     }
     
     if (dst_Y)
diff -x .git -x .gitignore -Naur libva/test/encode/jpegenc_utils.h isg_gms-libva/test/encode/jpegenc_utils.h
--- libva/test/encode/jpegenc_utils.h	2016-08-09 02:29:56.802740008 +0800
+++ isg_gms-libva/test/encode/jpegenc_utils.h	2016-08-09 02:29:50.846633442 +0800
@@ -65,6 +65,7 @@
 {
     bs->max_size_in_dword = BITSTREAM_ALLOCATE_STEPPING;
     bs->buffer = calloc(bs->max_size_in_dword * sizeof(int), 1);
+    assert(bs->buffer);
     bs->bit_offset = 0;
 }
 
@@ -105,6 +106,7 @@
         if (pos + 1 == bs->max_size_in_dword) {
             bs->max_size_in_dword += BITSTREAM_ALLOCATE_STEPPING;
             bs->buffer = realloc(bs->buffer, bs->max_size_in_dword * sizeof(unsigned int));
+            assert(bs->buffer);
         }
 
         bs->buffer[pos + 1] = val;
diff -x .git -x .gitignore -Naur libva/test/encode/mpeg2vaenc.c isg_gms-libva/test/encode/mpeg2vaenc.c
--- libva/test/encode/mpeg2vaenc.c	2016-08-09 02:29:56.802740008 +0800
+++ isg_gms-libva/test/encode/mpeg2vaenc.c	2016-08-09 02:29:50.846633442 +0800
@@ -831,6 +831,7 @@
 
     max_entrypoints = vaMaxNumEntrypoints(ctx->va_dpy);
     entrypoint_list = malloc(max_entrypoints * sizeof(VAEntrypoint));
+    assert(entrypoint_list);
     vaQueryConfigEntrypoints(ctx->va_dpy,
                              ctx->profile,
                              entrypoint_list,
diff -x .git -x .gitignore -Naur libva/test/loadsurface.h isg_gms-libva/test/loadsurface.h
--- libva/test/loadsurface.h	2016-08-09 02:29:56.802740008 +0800
+++ isg_gms-libva/test/loadsurface.h	2016-08-09 02:29:50.846633442 +0800
@@ -72,10 +72,30 @@
     
     if (width != 640 || height != 480) { /* need to scale the pic */
         pic_y = (unsigned char *)malloc(width * height);
+        if(pic_y == NULL) {
+           printf("Failed to allocate memory for pic_y\n");
+           return -1;
+        }
+
         pic_u = (unsigned char *)malloc(width * height/4);
-        pic_v = (unsigned char *)malloc(width * height/4);
+        if(pic_u == NULL) {
+           printf("Failed to allocate memory for pic_u\n");
+           free(pic_y);
+           return -1;
+        }
 
+        pic_v = (unsigned char *)malloc(width * height/4);
+        if(pic_v == NULL) {
+           printf("Failed to allocate memory for pic_v\n");
+           free(pic_y);
+           free(pic_u);
+           return -1;
+        }
         allocated = 1;
+
+        memset(pic_y, 0, width * height);
+        memset(pic_u, 0, width * height /4);
+        memset(pic_v, 0, width * height /4);
         
         scale_2dimage(pic_y_old, 640, 480,
                       pic_y, width, height);
@@ -133,7 +153,6 @@
         }
     }
         
-    
     if (allocated) {
         free(pic_y);
         free(pic_u);
@@ -352,9 +371,12 @@
                 v_ptr = src_U + row * (src_width/2);
                 u_ptr = src_V + row * (src_width/2);
             }
-            for(j = 0; j < src_width/2; j++) {
-                U_row[2*j] = u_ptr[j];
-                U_row[2*j+1] = v_ptr[j];
+            if ((src_fourcc == VA_FOURCC_IYUV) ||
+                (src_fourcc == VA_FOURCC_YV12)) {
+                for(j = 0; j < src_width/2; j++) {
+                    U_row[2*j] = u_ptr[j];
+                    U_row[2*j+1] = v_ptr[j];
+                }
             }
             break;
         case VA_FOURCC_IYUV:
@@ -442,9 +464,12 @@
                 v_ptr = dst_U + row * (dst_width/2);
                 u_ptr = dst_V + row * (dst_width/2);
             }
-            for(j = 0; j < dst_width/2; j++) {
-                u_ptr[j] = U_row[2*j];
-                v_ptr[j] = U_row[2*j+1];
+            if ((dst_fourcc == VA_FOURCC_IYUV) ||
+                (dst_fourcc == VA_FOURCC_YV12)) {
+                for(j = 0; j < dst_width/2; j++) {
+                    u_ptr[j] = U_row[2*j];
+                    v_ptr[j] = U_row[2*j+1];
+                }
             }
             break;
         case VA_FOURCC_IYUV:
diff -x .git -x .gitignore -Naur libva/test/putsurface/putsurface_common.c isg_gms-libva/test/putsurface/putsurface_common.c
--- libva/test/putsurface/putsurface_common.c	2016-08-09 02:29:56.802740008 +0800
+++ isg_gms-libva/test/putsurface/putsurface_common.c	2016-08-09 02:29:50.862633729 +0800
@@ -350,9 +350,6 @@
 
 static int upload_source_YUV_once_for_all()
 {
-    VAImage surface_image;
-    void *surface_p=NULL, *U_start,*V_start;
-    VAStatus va_status;
     int box_width_loc=8;
     int row_shift_loc=0;
     int i;
@@ -517,7 +514,7 @@
     VAStatus va_status;
     pthread_t thread1;
     int ret;
-    char c;
+    int c;
     int i;
     char str_src_fmt[5], str_dst_fmt[5];
 
diff -x .git -x .gitignore -Naur libva/test/putsurface/putsurface_wayland.c isg_gms-libva/test/putsurface/putsurface_wayland.c
--- libva/test/putsurface/putsurface_wayland.c	2016-08-09 02:29:56.802740008 +0800
+++ isg_gms-libva/test/putsurface/putsurface_wayland.c	2016-08-09 02:29:50.862633729 +0800
@@ -25,6 +25,7 @@
 #include <stddef.h>
 #include <errno.h>
 #include <sys/select.h>
+#include <assert.h>
 #ifdef IN_LIBVA
 # include "va/wayland/va_wayland.h"
 #else
@@ -141,6 +142,7 @@
     struct wl_callback *callback;
     VAStatus va_status;
     struct wl_buffer *buffer;
+    int ret = 0;
 
     if (!wl_drawable)
         return VA_STATUS_ERROR_INVALID_SURFACE;
@@ -152,8 +154,8 @@
     /* Wait for the previous frame to complete redraw */
     if (wl_drawable->redraw_pending) {
         wl_display_flush(d->display);
-        while (wl_drawable->redraw_pending)
-            wl_display_dispatch(wl_drawable->display);
+        while (wl_drawable->redraw_pending && ret >=0)
+            ret = wl_display_dispatch(wl_drawable->display);
     }
 
     va_status = vaGetSurfaceBufferWl(va_dpy, va_surface, VA_FRAME_PICTURE, &buffer);
@@ -207,8 +209,10 @@
         return NULL;
 
     d->display = wl_display_connect(NULL);
-    if (!d->display)
+    if (!d->display){
+        free(d);
         return NULL;
+    }
 
     wl_display_set_user_data(d->display, d);
     d->registry = wl_display_get_registry(d->display);
@@ -255,6 +259,7 @@
     wl_shell_surface_set_toplevel(shell_surface);
 
     drawable1 = malloc(sizeof(*drawable1));
+    assert(drawable1);
     drawable1->display          = display;
     drawable1->surface          = surface1;
     drawable1->redraw_pending   = 0;
@@ -270,6 +275,7 @@
     wl_shell_surface_set_toplevel(shell_surface_2);
 
     drawable2 = malloc(sizeof(*drawable2));
+    assert(drawable2);
     drawable2->display          = display;
     drawable1->surface          = surface2;
     drawable2->redraw_pending   = 0;
diff -x .git -x .gitignore -Naur libva/va/va.c isg_gms-libva/va/va.c
--- libva/va/va.c	2016-08-09 02:29:56.802740008 +0800
+++ isg_gms-libva/va/va.c	2016-08-09 02:29:50.862633729 +0800
@@ -74,8 +74,10 @@
 	    continue;
 
         if (strcmp(token, env) == 0) {
-            if (env_value)
+            if (env_value) {
                 strncpy(env_value,value, 1024);
+                env_value[1023] = '\0';
+            }
 
             fclose(fp);
 
@@ -88,8 +90,10 @@
     /* no setting in config file, use env setting */
     value = getenv(env);
     if (value) {
-        if (env_value)
+        if (env_value) {
             strncpy(env_value, value, 1024);
+            env_value[1023] = '\0';
+        }
         return 0;
     }
     
diff -x .git -x .gitignore -Naur libva/va/va_trace.c isg_gms-libva/va/va_trace.c
--- libva/va/va_trace.c	2016-08-09 02:29:56.802740008 +0800
+++ isg_gms-libva/va/va_trace.c	2016-08-09 02:29:50.882634087 +0800
@@ -546,6 +546,7 @@
     FILE *fp = NULL;
 
     strncpy(env_value, fn_env, 1024);
+    env_value[1023] = '\0';
     FILE_NAME_SUFFIX(env_value, 1024,
         "ctx-", (unsigned int)ptra_ctx->trace_context);
 
@@ -594,6 +595,7 @@
         char env_value[1024];
 
         strncpy(env_value, pva_trace->fn_log_env, 1024);
+        env_value[1023] = '\0';
         FILE_NAME_SUFFIX(env_value, 1024,
             "thd-", (unsigned int)thd_id);
 
@@ -733,7 +735,6 @@
 {
     char env_value[1024];
     unsigned short suffix = 0xffff & ((unsigned int)time(NULL));
-    int trace_index = 0;
     FILE *tmp;
     struct va_trace *pva_trace = calloc(sizeof(struct va_trace), 1);
     struct trace_context *trace_ctx = calloc(sizeof(struct trace_context), 1);
@@ -939,7 +940,7 @@
 
 static void va_TraceSurface(VADisplay dpy, VAContextID context)
 {
-    unsigned int i, j;
+    unsigned int i;
     unsigned int fourcc; /* following are output argument */
     unsigned int luma_stride;
     unsigned int chroma_u_stride;
@@ -951,7 +952,6 @@
     void *buffer = NULL;
     unsigned char *Y_data, *UV_data, *tmp;
     VAStatus va_status;
-    unsigned char check_sum = 0;
     DPY2TRACECTX(dpy, context, VA_INVALID_ID);
 
     if (!trace_ctx->trace_fp_surface)
@@ -1510,9 +1510,6 @@
     VABufferType type;
     unsigned int size;
     unsigned int num_elements;
-    
-    VACodedBufferSegment *buf_list;
-    int i = 0;
 
     if (buf_id == VA_INVALID_ID)
         return;
@@ -1882,7 +1879,7 @@
     va_TraceMsg(trace_ctx,"*VAHuffmanTableBufferJPEG\n");
 
     for (i = 0; i < 2; ++i) {
-        va_TraceMsg(trace_ctx,"\tload_huffman_table[%d] =%u\n", i, p->load_huffman_table[0]);
+        va_TraceMsg(trace_ctx,"\tload_huffman_table[%d] =%u\n", i, p->load_huffman_table[i]);
         va_TraceMsg(trace_ctx,"\thuffman_table[%d] =\n", i);
         memset(tmp, 0, sizeof tmp);
         for (j = 0; j < 16; ++j) {
@@ -3123,7 +3120,6 @@
 {
     VAEncPackedHeaderParameterBuffer* p = (VAEncPackedHeaderParameterBuffer*)data;
     DPY2TRACECTX(dpy, context, VA_INVALID_ID);
-    int i;
 
     if (!p)
         return;
@@ -3557,7 +3553,7 @@
 {
     VADecPictureParameterBufferVP9 *p = (VADecPictureParameterBufferVP9 *)data;
     DPY2TRACECTX(dpy, context, VA_INVALID_ID);
-    int i,j;
+    int i;
 
     va_TraceMsg(trace_ctx, "\t--VAPictureParameterBufferVP9\n");
 
diff -x .git -x .gitignore -Naur libva/va/wayland/va_wayland_drm.c isg_gms-libva/va/wayland/va_wayland_drm.c
--- libva/va/wayland/va_wayland_drm.c	2016-08-09 02:29:56.802740008 +0800
+++ isg_gms-libva/va/wayland/va_wayland_drm.c	2016-08-09 02:29:50.882634087 +0800
@@ -171,7 +171,6 @@
     VADriverContextP const ctx = pDisplayContext->pDriverContext;
     struct va_wayland_drm_context *wl_drm_ctx;
     struct drm_state *drm_state;
-    uint32_t id;
 
     wl_drm_ctx = malloc(sizeof(*wl_drm_ctx));
     if (!wl_drm_ctx)
diff -x .git -x .gitignore -Naur libva/va/wayland/va_wayland_emgd.c isg_gms-libva/va/wayland/va_wayland_emgd.c
--- libva/va/wayland/va_wayland_emgd.c	2016-08-09 02:29:56.802740008 +0800
+++ isg_gms-libva/va/wayland/va_wayland_emgd.c	2016-08-09 02:29:50.890634230 +0800
@@ -115,7 +115,6 @@
     VADriverContextP const ctx = pDisplayContext->pDriverContext;
     VADisplayContextWaylandEMGD *wl_emgd_ctx;
     struct drm_state *drm_state;
-    uint32_t id;
 
     wl_emgd_ctx = malloc(sizeof(*wl_emgd_ctx));
     if (!wl_emgd_ctx)
